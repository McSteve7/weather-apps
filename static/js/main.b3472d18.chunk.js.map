{"version":3,"sources":["logo.svg","components/Forms.js","components/Titles.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Forms","react_default","a","createElement","onSubmit","this","props","getWeather","id","type","name","placeholder","React","Component","Titles","Weather","city","country","temperature","humidity","pressure","description","error","API_KEY","App","state","_callee","e","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","console","log","_this","setState","main","temp","sys","weather","stop","components_Titles","components_Forms","components_Weather","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b3472d18.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\n\r\nclass Forms extends React.Component{\r\nrender(){\r\n    return(\r\n    \r\n    <form onSubmit={this.props.getWeather}>\r\n    <input id=\"city-section\" type=\"text\" name=\"city\" placeholder=\"  City...\" />\r\n    <input id=\"country-section\" type=\"text\" name=\"country\" placeholder=\"  Country...\" />\r\n    <button id=\"myButton\">Get Weather</button>\r\n    </form>\r\n    );\r\n    \r\n}\r\n}\r\n\r\nexport default Forms;","import React from \"react\";\r\n\r\nclass Titles extends React.Component{\r\n    \r\nrender(){\r\n    return(\r\n        <div>\r\n        <h1 id=\"weather-header\">Weather Application</h1>\r\n        <h4 id=\"weather-para\">Get weather information for your city and more!</h4>\r\n        </div>\r\n\r\n    );\r\n}\r\n}\r\n\r\nexport default Titles;","import React from \"react\";\r\n\r\nclass Weather extends React.Component{\r\nrender(){\r\n    return(\r\n<div id=\"weather-result\">\r\n{this.props.city && this.props.country && <p>Location: {this.props.city}, {this.props.country}</p>}\r\n{this.props.temperature && <p>Temperature: {this.props.temperature}</p>}\r\n{this.props.humidity && <p>Humidity: {this.props.humidity}</p>}\r\n{this.props.pressure && <p>Pressure: {this.props.pressure}</p>}\r\n{this.props.description && <p>Condition: {this.props.description}</p>}\r\n{this.props.error && <p>Error!: {this.props.error}</p>}\r\n\r\n<h6 id=\"footer-message\">Built with love by Ajiboye Damilola</h6>\r\n</div>\r\n\r\n\r\n    );\r\n}\r\n}\r\n\r\nexport default Weather;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Forms from \"./components/Forms\"\nimport Titles from \"./components/Titles\"\nimport Weather from \"./components/Weather\"\n\n\nconst API_KEY = \"6157e890d885dc4181d115089f315042\";\n\nclass App extends React.Component{\n  state = {\n    temperature: \"\",\n    city: \"\",\n    country: \"\",\n    humidity: \"\",\n    pressure: \"\",\n    description: \"\",\n    error: \"\"\n  }\n getWeather = async(e) => {\n  e.preventDefault();\n  const city = e.target.elements.city.value;\n  const country = e.target.elements.country.value;\n const api_call = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}`);\n  const data = await api_call.json();\n if (city && country){\n  console.log(data);\n\n  this.setState({\n    temperature: data.main.temp,\n    city: data.name,\n    country: data.sys.country,\n    humidity: data.main.humidity,\n    pressure: data.main.pressure,\n    description: data.weather[0].description,\n    error: \"\"\n  })\n }else{\n  this.setState({\n    temperature: \"\",\n    city: \"\",\n    country: \"\",\n    humidity: \"\",\n    pressure: \"\",\n    description:\"\",\n    error: \"Please enter the values\"\n  })\n }\n}\n\nrender(){\n  return(\n  <div>\n  <Titles  />\n  <Forms getWeather={this.getWeather} />\n  <Weather temperature={this.state.temperature}\n  city={this.state.city}\n  country={this.state.country}\n  humidity={this.state.humidity}\n  pressure={this.state.pressure}\n  description={this.state.description}\n  error={this.state.error}\n  />\n  \n  </div>\n  );\n}\n\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}